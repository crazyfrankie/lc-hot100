/*
题目：
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

思路：
首先，一间房子我们的选择只有两个，偷或者不偷。
这里的递推关系主要来自于“影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统”，也就是说如果一间房子你偷了，那么相隔的你只能跳过，这里就给我们带来了递推。
那么对于偷到某一间房子时，我们需要查看它的前一个是否偷了，如果没有则可以偷，如果有则当前的值即为它前一个偷了之后的值
如果偷，那么它的前一间必然没偷，那么值为偷到当前一间的前两间偷盗之后的值 dp[i-2]+nums[i]
如果不偷，那么它的前一间是肯定偷了的，那么值即为偷到前一间的值 dp[i-1]

dp[0] 和 dp[1] 的值可以通过以上概念推断
*/
package main

import "fmt"

func rob(nums []int) int {
	dp := make([]int, len(nums))
	dp[0] = nums[0]
	dp[1] = max(dp[0], nums[1])
	for i := 2; i < len(nums); i++ {
		dp[i] = max(dp[i-2]+nums[i], dp[i-1])
	}
	fmt.Println(dp)
	return dp[len(nums)-1]
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func main() {
	nums := []int{1, 2, 3, 1}
	fmt.Println(rob(nums))
}
